  \documentclass{report}
\pagestyle{plain}
\pagenumbering{arabic}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{textcomp}

\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{array}
\usepackage{amscd,amsmath,amssymb,amstext,amsthm}
\usepackage{braket}
\usepackage{enumitem}
\usepackage{mathpartir}
\usepackage{tikz}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage{ulem}
\usepackage{booktabs}
\usepackage{setspace}
\usepackage{longtable}
\usepackage{sectsty}
\usepackage{titlesec}
\usepackage{titling}
\usepackage[numbers]{natbib}
\usepackage{graphicx}
\usepackage{caption}
\usepackage{threeparttable}
\usepackage{threeparttablex}
\usepackage{placeins}
\usepackage{subcaption}
\usepackage{textgreek}
\usepackage[version=3]{mhchem}
\usepackage[nottoc]{tocbibind}
\usepackage{xcolor}
\usepackage{listings}
\usepackage{tikz}
\usetikzlibrary{shapes,arrows,positioning} 
\usetikzlibrary{calc}
\usetikzlibrary{arrows.meta}
\usetikzlibrary{positioning}

\definecolor{codegreen}{rgb}{0,0.6,0}
\definecolor{codegray}{rgb}{0.5,0.5,0.5}
\definecolor{codepurple}{rgb}{0.58,0,0.82}
\definecolor{backcolour}{rgb}{0.95,0.95,0.92}

\lstdefinestyle{mystyle}{
    backgroundcolor=\color{backcolour},   
    commentstyle=\color{codegreen},
    keywordstyle=\color{magenta},
    numberstyle=\tiny\color{codegray},
    stringstyle=\color{codepurple},
    basicstyle=\ttfamily\footnotesize,
    breakatwhitespace=false,         
    breaklines=true,                 
    captionpos=b,                    
    keepspaces=true,                 
    numbers=left,                    
    numbersep=5pt,                  
    showspaces=false,                
    showstringspaces=false,
    showtabs=false,                  
    tabsize=2
}
\lstset{style=mystyle}

\DeclareUnicodeCharacter{2009}{ }

\definecolor{darkblue}{rgb}{0,0,0.7}
\usepackage{hyperref}
\usepackage{url}
%\usepackage{breakurl}
\def\UrlBreaks{\do\/\do-}


\usepackage
[
        a4paper,
        left=30mm,
        right=25mm,
        top=25mm,
        bottom=25mm,    
]
{geometry}

\makeatletter
    \renewcommand{\@makechapterhead}[1]{%
    \vspace*{50 pt}%
    {\setlength{\parindent}{0pt} \raggedright \normalfont
    \bfseries\Huge\sffamily
    \ifnum \value{secnumdepth}>1 
        \if@mainmatter\thechapter.\ \fi%
    \fi
    #1\par\nobreak\vspace{40 pt}}}
    \makeatother

\newcommand{\subtitle}[1]{%
  \posttitle{%
    \par\end{center}
    \begin{center}\large#1\end{center}
    \vskip4em}%
}	

\newcommand*\PrintSkips[1]{%
  \typeout{In #1:}%
  \typeout{\@spaces above: \the\abovecaptionskip}%
  \typeout{\@spaces below: \the\belowcaptionskip}%
}

\newcommand{\tu}{\textmu}

\NewDocumentCommand{\codeword}{v}{%
\texttt{\textcolor{black}{#1}}%
}

\newcolumntype{P}[1]{>{\raggedright\arraybackslash}p{#1}}  

\begin{document}
\allsectionsfont{\sffamily}
\onehalfspacing

\setlength\parindent{0pt}

%===================================================
\chapter{Experiments}
%===================================================

We used five live-cell imaging datasets to build and to challenge the R package. All data sets were acquired using a Widefield Microscope DMI8 by Leica Microsystems (Wetzlar, GER) as imaging device equipped with a \textcolor{blue}{[...]} objective with a resolution of \textcolor{blue}{[...]} at 5\% $\text{CO}_2$.

\section{Data sets}

To set the distance and duration thresholds for cell-cell contact computation, we used three data sets of live-cell imaging films with tumour and T cells. An overview of the data sets is given in Table \ref{Datasets_building}.

% Table of training data sets
\begin{table}[h!]
\centering
\caption[Data sets to build the work flow]{Overview of data sets that were used for building the R package} \label{Datasets_building}

\begin{tabular}{ P{2.5cm} P{2.5cm}  P{2cm} P{2cm} P{2cm} P{2cm}} 
Tumour cell line 	& T cell line	& Frame rate & Frame size &  Duration & Temperature\\
					& 				& (sec/frame)&(\tu m $\times$ \tu m) & (h) & $(^\circ \text{C})$\\ \midrule
\textcolor{blue}{YUMM-OVA} &  				&  &   &  &  \\[10pt]
\textcolor{blue}{add cell concentration} &  				&  &   &  &  \\[10pt]
\textcolor{blue}{YUMM} &  				&  &   &  &  \\[10pt]
\textcolor{blue}{Ovarian} &  				&  &   &  &  \\[10pt]
\end{tabular}
\end{table}

To challenge the work flow for cell-cell contact detection, we applied the image analysis pipeline on three additional data sets (see Table \ref{Datasets_challenging}).

% Table of challenge data sets
\begin{table}[h!]
\centering
\caption[Data sets to challenge the work flow]{Overview of data sets that were used for challenging the R package} \label{Datasets_challenging}

\begin{tabular}{ P{2.5cm} P{2.5cm}  P{2cm} P{2cm} P{2cm} P{2cm}} 
Tumour cell line 	& T cell line	& Frame rate & Frame size &  Duration & Temperature\\
					& 				& (sec/frame)&(\tu m $\times$ \tu m) & (h) & $(^\circ \text{C})$\\ \midrule
\textcolor{blue}{YUMM} &  				&  &   &  &  \\[10pt]
\textcolor{blue}{YUMM-OVA} &  				&  &   &  &  \\[10pt]
\textcolor{blue}{B16F10} &  				&  &   &  &  \\[10pt]
\end{tabular}

\end{table}

%===================================================
\chapter{Method}
%===================================================

The R package \textit{cellcontacts} was built to process cell tracks acquired from live-cell imaging of tumour cells with T cells. It is meant to compute cell-cell contacts and characteristics of cell movement for large data sets. Moreover, it offers functions to connect the results on cell dynamics to findings from immunological staining. The package requires preprocessing of the live-cell imaging films with a cell tracking tool, e.g., \href{https://imagej.net/plugins/trackmate/}{TrackMate} or \href{https://imaris.oxinst.com/products/imaris-for-tracking}{Imaris}. In this chapter, the algorithm to compute cell-cell contacts is described and the image analysis pipeline incorporating the cell tracking tool TrackMate is laid out.

\section{Algorithm to compute cell-cell contacts}

In this section, we formally define cell-cell contacts and describe the algorithm to compute cell-cell contacts.

\paragraph{Formalizing the data set and defining cell-cell contacts} 
Let $n \in \mathbb{N}$ be the the last time point in the live-cell imaging film, equivalent to the maximum frame number. 
Let $M_i$ be the set of all cells at one time point $i \in \{1, \dots, n\}$ with $0 \in M_i$ representing a non-registered cell. Let $U_i \subset M_i$ be the set of tumour cells and $V_i \subset M_i$ the set of T cells at a time point $i \in \{1, \dots, n\}$ such that $M_i = U_i \cup V_i$. \\

A tumour cell shall be represented as $u = (u_1, \dots, u_n) \in U_1 \times \dots \times U_n$ such that for each time point $i \in \{1, \dots, n\}$, the element $u_i$  either represents the tumour cell at this time point or equals $0$ if the respective tumour cell was not registered at this time point. Analogously, we define T cells as $v = (v_1, \dots, v_n) \in V_1 \times \dots \times V_n$.\\

Let $d_i: U_i \times V_i \to \mathbb{R}$ be a metric that describes the euclidean distances between the segmented area of tumour cell and a T cell for a given time point $i \in \{1, \dots,n\}$ and if either the tumour cell or the T cell was not registered during that time point, we define $d_i(u_i, v_i) = \infty$.\\

Let $x \in \mathbb{R}$ be a distance threshold in \textmu m and $m \in \mathbb{N}$ a duration threshold given as number of frames. We define that a tumour cell $u \in U_1 \times \dots \times U_n$ and a T cell $v \in V_1 \times \dots \times V_n$ are \textit{in contact} if and only if their distance is below the distance threshold for $m$ consecutive frames:
\begin{equation*}
	u \text{ and } v \text{ in contact } 
		\quad \Leftrightarrow \quad 
		\exists \, j \in \{1, \dots, n\} \;
		\forall i \in \{j, \dots, j+m\}: \;
	 	d_i(u_i, v_i) \le x
\end{equation*}

\paragraph{Algorithm (cell-cell contact computation)} To compute cell-cell contacts, we need to find all tumour cell/T cell pairs $(u,v)$ that maintain a distance below threshold for $m$ consecutive frames. As the number of distance calculations grow quadratically with increasing frame size of the film, we add preprocessing steps to fasten the computation time.\\


\begin{center}
\fbox{
\parbox{\textwidth}{
\smallskip

\begin{center}
\textbf{Algorithm to compute cell-cell contacts}
\end{center}
\textbf{Input}: 
	\begin{itemize}
		\item Cell tracks and cell areas of tumour cells and T cells at all time points.
		\item A distance threshold $x$.
		\item A minimum duration threshold expressed as a number of frames $m$.
	\end{itemize}
\textbf{Output}: Data frame with columns  
	\begin{itemize}
		\item Names of cell pairs that maintain a distance below threshold for at least $m$ consecutive frames.
		\item Time points during a contact.			
		\item Cell-cell distances during a contact.
	\end{itemize}
\textbf{Instructions}: 
\begin{enumerate}
	\item Preprocessing
		\begin{enumerate}[label=1.\arabic*]
			\item Compute the center points of all tumour and T cells.
			\item Create a grid in which columns and rows have a distance of 100\,\textmu m.
			\item Sort the computed cell center points into the grid.
		\end{enumerate}
	\item Distance computation
		\begin{enumerate}[label=2.\arabic*]
			\item Compute all possible tumour cell/T cell pairs for each time point.
			\item For each pair, save the information whether the grid coordinates are farther away than two two rows or columns. 
			\item If the grid coordinates are at least in neighbouring rows and columns, compute and save the distance of the segmented tumour and T cell area.
		\end{enumerate}
	\item Filtering for contacts 
		\begin{enumerate}[label=3.\arabic*]
			\item For all time points, discard cell pairs that have a distance above the threshold $x$.
			\item For the remaining pairs, discard cell pairs that maintain a distance below threshold for less than $m$ frames.	
			\item Return the pair names, their distance and their time point information as a data frame.
		\end{enumerate} 
\end{enumerate}
}
}
\end{center}



\section{Work flow}

This section is a detailed guide through the image analysis work flow. An overview of the steps in the work flow is given in Figure \ref{Workflow_overview}. An exemplary R script and documentation of the R functions are provided on the \href{https://github.com/juliaquach02/cellcontacts}{GitHub page} of the R package.

%\begin{figure}[h!]
%\centering
%\includegraphics[width=0.8\textwidth]{Workflow_simple.jpg}
%\caption[Workflow_Overview]{Overview of the image analysis pipeline \label{Workflow_overview}}
%\end{figure}

% Overview
\begin{figure}
\caption[Workflow_Overview]{This figure gives an overview how cell-cell contacts in live-cell imaging films are automatically detected and quantitatively analysed using the R package \textit{cellcontacts}. \label{Workflow_overview}}
\centering
\tikzstyle{block} = [rectangle, draw,
    text width = 15cm, text centered, rounded corners, inner ysep=10pt]
\tikzstyle{line} = [draw, -latex']

\begin{tikzpicture}[node distance = 1cm, auto]
    \node(Setup) [block]  { 
    		\textbf{Setup} \begin{itemize}
    		\item Installation of ImageJ with StarDist and TrackMate plugin.
    		\item Installation of RStudio with \textit{cellcontacts} package and dependencies.
    	\end{itemize}
    };
    \node(Preprocessing) [block, below =of Setup] {
    		\textbf{Preprocessing in ImageJ} \begin{enumerate}
			\item Loading of the live-cell imaging film as .tif file with at least two channels for tumour and T cells. Both cell types need to be fluorescent.    		
    		\item Segmentation and tracking of tumour cells and T cells in the TrackMate plugin.
			\item Export of cell tracks as .csv file and cell ROIs as .roi files in zipped folders.
    \end{enumerate}
    };
    \node(Computation) [block, below =of Preprocessing] {
    		\textbf{Analysis in RStudio} \begin{enumerate}
    		\item Setting source and destination directories and loading of \textit{cellcontacts} library. 
			\item Importing cell tracks as data frame from .csv file and cell ROIs as list from zipped folders with .roi files.
			\item Matching the track names to their respective frame number.
			\item Rearranging data set into hash maps.
			\item Computing cell-cell distances.
			\item Filtering for cell-cell contacts.
			\item Exporting the data frame with cell-cell contacts as .csv file.
    \end{enumerate}
    };
    \node(Validation) [block, below =of Computation] {
    		\textbf{Validation in ImageJ} \begin{enumerate}
    		\item Import of the computed cell-cell contacts via the TrackMate CSV importer.
    		\item Checking the live-cell imaging film with the labelled tumour cell/T cell contacts.
    \end{enumerate}
    };
    \node(Further analysis) [block, below =of Validation] {
    		\textbf{Statistcal analyses in RStudio} \begin{enumerate}
    		\item Connecting the computed cell-cell contacts to results from immunological staining.
    		\item Performing statistical analysis on the results.
    \end{enumerate}
    };
    % Draw edges
    \path [line] (Setup) -- (Preprocessing);
    \path [line] (Preprocessing) -- (Computation);
    \path [line] (Computation) -- (Validation);
	\path [line] (Validation) -- (Further analysis);
    
\end{tikzpicture}
\end{figure}



\paragraph{Requirements}
To use this work flow on a live-cell imaging film, the imaged cells need to be fluorescent to enable their correct segmentation. To ensure correct tracking of fast-moving T cells, the frame rate needs to be at around 90\,s/frame.

For the image processing, installation of the open source package \href{https://imagej.net/software/fiji/}{Fiji}, also known as ImageJ, with the plugins \href{https://imagej.net/plugins/stardist}{StarDist} for cell segmentation and \href{https://imagej.net/plugins/trackmate/}{TrackMate} for cell tracking is required.
To use the \textit{cellcontacts} package, the programming language \href{https://cran.r-project.org/bin/windows/base/}{R} is needed, preferably in the \href{https://posit.co/download/rstudio-desktop/}{RStudio environment}.

\paragraph{Installation of R package}
After getting access to the \textit{cellcontacts} project on GitHub, the latest development version of \textit{cellcontacts} can be installed in the R environment:
\begin{lstlisting}[language=R]
	devtools::install_github( "juliaquach02/cellcontacts" ) 
\end{lstlisting}
The package can be loaded via:
\begin{lstlisting}[language=R]
	library( cellcontacts )
\end{lstlisting}

\paragraph{Preprocessing} 
To extract the image features, we load the live-cell imaging film as .tif-file in Fiji to use the TrackMate plugin for segmentation and tracking. Two separate TrackMate session are needed to analyse T cells und tumour cells. During segmentation and tracking, the plugin offers the possibility to adjust parameters and to manually correct segmented cells or cell tracks if necessary. After segmentation and tracking, the cell areas of both data sets are renamed in the TrackMate GUI by their assigned track name and an unique index for the respective track. We export cell tracks as .csv file. By default, the first three lines of the .csv file contain the header of its columns in three different text styles (capital letters, full name and abbreviated). To enable correct loading of the .csv files with R, two of the first three lines are deleted, e.g. via a text editor. 

Furthermore, the renamed cells region of interests (ROIs) are exported from TrackMate and saved into several zipped folders with around thousand .roi-files per folder. Saving the ROIs into several zipped folders will enable parallel, hence faster, import to R. For the saving process, we provide an \href{https://github.com/juliaquach02/cellcontacts/blob/main/ImageJ_Macros/Macro_Rename_and_Save_ROIs_in_Subfolders.ijm}{ImageJ macro} on the package's GitHub page.
 
Apart from exporting cell tracks and cell ROIs, the TrackMate sessions can be saved as .xml file. This allows reloading the session with its segmentation and tracking parameters. 
At the end of the preprocessing, there are two .xml files, one for the tumour cell and one for the T cell analysis session. In addition, there are two .csv files with the track information and at least two zipped folders with .roi files representing the segmented tumour cell and T cell ROIs. 
An overview of the data structure after this preprocessing step is given in the Table \ref{Files_after_preprocessing}.

% Table of files after preprocessing
\begin{table}[h!]
\centering
\caption[Data structure after preprocessing]{This is an overview of files that should be available for both, tumour and T cells, after preprocessing a live-cell imaging film.} \label{Files_after_preprocessing}

\begin{tabular}{ ll P{7cm}} 
	Folder 			& File type & Content\\ \midrule
	Tumour/T cells 	& .zip-file or folder with .zip-files	& .roi-files that represent the area of the segmented tumour/T cells with file names in the format Track\char`_[id]\char`_[index].roi \\[10pt]
					& .csv file & Data frame in which each row represents one cell in one frame.  The data frame should contain columns for the track names (in the format Track\char`_[id]\char`_[index].roi), the x-, and y-coordinate and the frame number.\\[10pt]
					& .xml file & This file is optional. It contains information about the TrackMate session such that the session can be reloaded.\\ \bottomrule
	\end{tabular}
\end{table}

\paragraph{Setting directories and loading the track data} After acquiring all necessary files, we switch to RStudio to use the \textit{cellcontacts} package. For this, we set the directories to import the data. Cell tracks saved as .csv files are loaded as data frame using the base R function \codeword{read.table()}.

To load the zip-files containing the ROIs, we use the \codeword{read.ijzip()} function from the \codeword{RImageJROI} package. 
%To fasten the loading process, .roi-files were saved beforehand in zipped subfolders with the names 0.zip, 1.zip, \dots, $n$.zip with $(n-1)$ the total number of subfolders. The files were split into subfolders to load the data in parallel using the package \codeword{future}. To confirm that all subfolders are loaded, we add a helper function \codeword{read_ijzip} to print the names of the subfolders once they are loaded. Below, the code to import the tumour cell tracks and tumour cell ROIs is displayed. Analogously, T cell tracks and T cell ROIs are imported:\\

\begin{lstlisting}[language=R]
	# Import tumour cell tracks
	tumorTracksTxt <- read.table( tumorTracksPath, header = TRUE, sep = ",", )
	
	# Load tumour ROIs of movie --------------------------------------------------
	# Helper function to print names of imported folders
	read_ijzip <- function( zipPath ){  
	  result <- read.ijzip(zipPath)
	  print( zipPath )
	  return( result )
	}
		
	# Create list of zipped ROI folders (Adjust numSubfolders for each data set)
	numSubfolders <- 14 
	pathROIs <- list()
	
	for( i in 1:numSubfolders){
	  pathROIs[[i]] <- paste0(tumorROIsPath, as.character(i-1), ".zip")
	}
	
	# Subdivide list into two lists to create two jobs
	pathROIsPt1 <- pathROIs[ 1:floor(numSubfolders/2) ]
	pathROIsPt2 <- pathROIs[ (floor(numSubfolders/2) + 1):numSubfolders ]
	
	# Load ROIs in parallel
	plan(multisession)
	
	ROIsPt1 %<-% {  # job 1
	  ROIsPt1 <- lapply( pathROIsPt1, read_ijzip)
	}
	ROIsPt2 %<-%{   # job 2
	  ROIsPt2 <- lapply( pathROIsPt2, read_ijzip) 
	}
	
	tumorROIs <- append( ROIsPt1, ROIsPt2)
	
\end{lstlisting}

\paragraph{Putting data into hash maps} 
For an efficient retrieval of our data during computation, we provide functions to add the data set into hash maps. To decrease the computation time of cell-cell distances, we sort the cell ROIs into a 2D grid to get rough estimates of their position. To create a 2D grid, we provide the function \codeword{create_grid()}. 
%To put the data into hash maps, we provide the functions
%\begin{itemize}
%	\item \codeword{insert_Hashmap_NamesToCoords()} to retrieve the ROI coordinates for a specific ROI name.
%	\item \codeword{insert_Hashmap_FrameNumToNames()} to retrieve track names of all cells for a specific time point.
%	\item \codeword{insert_Hashmap_NamesToCenter()} to retrieve the center point for a specific ROI name.
%	\item \codeword{insert_Hashmap_NamesToGrid()} to retrieve a rough position in the frame for a specific ROI name.
%\end{itemize}

Using the hash maps, we can easily access the track names of all cells at a given time point to compute possible tumour cell/T cell pairs. Moreover, we can retrieve the center points and approximate position of the cells before computing cell-cell distances. Calling the approximate cell position avoids the computation of euclidean distances for cell pairs that are clearly farther away than the distance threshold. Finally, we add a hash map to facilitate the access to ROI coordinates for each cell track name. Below, the code to add the tumour cell data into the above mentioned hash maps is displayed.  Analogously, T cell is added to hash maps:\\

\begin{lstlisting}[language=R]
	# Hash map from names to coordinates
	tumorROImap <- hashmap( default = "No value for this key")
	invisible( lapply( tumorROIs, insert_Hashmap_NamesToCoords, ROImap = tumorROImap) )

	# Hash map from time points to names
	tumor_trackName_frameNum <- matchTrackNamesWithFrameNum( tumorTracksTxt )
	insert_Hashmap_FrameNumToNames( tumor_trackName_frameNum, ROImap = tumorROImap )
	
	# Hash map from names to center points
	tumorROImap_center <- hashmap( default = "No value for this key")
	lapply( tumorROIs, insert_Hashmap_NamesToCenter, ROImap = tumorROImap_center ) 
	
	# Hash map from names to position in grid
	grid <- create_grid( c(0,600), c(0,600), dim = 6) # Frame dimensions in movie
	tumorROImap_NamesToGrid <- hashmap( default = "No value for this key")
	lapply( tumorROIs, insert_Hashmap_NamesToGrid, ROImap = tumorROImap_NamesToGrid, grid = grid ) 
	
\end{lstlisting}

\paragraph{Computing cell-cell distances}
Cell-cell distances need to be computed to filter for cell-cell contacts. For this, we provide the function \codeword{compute_distTimepoint_wGrid()}. This function computes for a given time point all possible tumour cell/T cell pairs. For each pair, the function checks the rough position of both cells using their position in the 2D grid. If the cells are at least in neighboring columns and rows of the grid, the euclidean distance between the cell ROI is computed.
The output of the function is a data frame listing all possible cell pairs with either the distance of the pair or a remark that the distance is substantially larger than the distance threshold for a cell-cell contact.\\

\begin{lstlisting}[language=R]
	# Computing cell-cell distances for all time points
	cellDist <- lapply( 0: tumorROImap[["lastTimepoint"]], compute_distTimepoint_wGrid,
                              gridWidth = 100,
                              ROImap1 = tumorROImap,
                              ROImap2 = tcellROImap,
                              ROImapField1 = tumorROImap_NamesToGrid,
                              ROImapField2 = tcellROImap_NamesToGrid )
                              
\end{lstlisting}

\paragraph{Filtering cell-cell contacts}
To filter the cell pairs involved in a cell-cell contact, we only keep pairs that maintain a distance below a distance threshold for a minimum duration of frames. The distance and duration threshold can be set manually. As result, we obtain a list of tumor cell/T cell pairs and each list entry represents one pair and contains the columns \textit{time point} and \textit{distances}. \\

\begin{lstlisting}[language=R]
	# Set a threshold for the minimum duration of a contact
	minDuration <- 4
	
	# To filter for cell-cell contacts, we use pipes from the tidyverse package.
	pairs <- cellDist %>% 
	    add_columnPair() %>% 
	    lapply( add_columnTimepoint, 
	    	tumor_trackName_frameNum = tumor_trackName_frameNum) %>% 
	    lapply( check_contacts, distThresh = 7) %>% 
	    lapply( keep_contactTrue)  %>% 
	    Filter( Negate(is.null), .) %>% 
	    .[ lapply( ., nrow) > 0 ]  %>% 
	    lapply( as.data.frame ) %>%  
	    bind_rows() %>%  
	    split( ., .$pair ) %>%  
	    .[ lapply( ., nrow) > minDuration ] 

	print( head( pairs[[1]] ) )

##           Var1       Var2        distances              pair timePoint contact
## 10  Track_10-1 Track_15-1 4.24264068711928 Track_10-Track_15         0    TRUE
## 33  Track_10-2 Track_15-2                0 Track_10-Track_15         1    TRUE
## 57  Track_10-3 Track_15-3                0 Track_10-Track_15         2    TRUE
## 83  Track_10-4 Track_15-4                0 Track_10-Track_15         3    TRUE
## 108 Track_10-5 Track_15-5 4.24264068711928 Track_10-Track_15         4    TRUE
## 128 Track_10-6 Track_15-6 2.82842712474619 Track_10-Track_15         5    TRUE
\end{lstlisting}

\paragraph{Exporting and visualization of results}
To check of the computed cell-cell contacts, we export the track information of the T cells that were in contact as .csv-file using \codeword{prepareExportContacts()} and \codeword{write.csv()}. The exported files are loaded into TrackMate via ImageJ > Plugins > Tracking > TrackMate CSV Importer. Using the .csv file, TrackMate labels the T cells in the .tif-file only during a contact (see Figure \ref{TrackMate_CSV_Importer}). This allows us to revisit the live-cell imaging film and to check whether cell-cell contacts are correctly computed.

\begin{figure}[h!]
\centering
\includegraphics[width=0.8\textwidth]{Screenshot_TrackMate_CSV_Importer.JPG}
\caption[TrackMate_CSV_Importer]{Via the TrackMate CSV Importer GUI, we can load our results back into a TrackMate session. \label{TrackMate_CSV_Importer}}
\end{figure}

\paragraph{Computing characteristics of cell tracks}

\paragraph{Correlating results to immunological staining results}

\paragraph{Identifying dying tumour cells}


%===================================================
\section{Tools for quality control}

\paragraph{Evaluation Metric}

To assess the reliability of our work flow, we used two metrics for evaluation:

\begin{itemize}
	\item Visually via TrackMate .csv importer
	\item Comparison to manually obtained results
\end{itemize}

\paragraph{ Examining track quality}


%===================================================
\bibliographystyle{unsrtnat}
\renewcommand{\bibname}{References}
\bibliography{literatur}


\end{document}